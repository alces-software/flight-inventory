
// Same colour as used for the app bar in alces-flight.com sites. XXX If this
// app becomes an alces-flight.com site could maybe DRY this up.
$flight-app-bar-blue: #2794d8;

$svg-layer-z-index: 1000;

@mixin cover {
  height: 100%;
  width: 100%;
  left: 0;
  top: 0;
}

@mixin asset-box-edge {
  padding: 5px;
  border: 1px solid black;
}

html {
  overflow-y: scroll;
}

#root {
  @include cover;
  position: absolute;
}

.svg-layer {
  @include cover;
  position: fixed;

  // SVG elements should appear on top of the diagram, but the root SVG element
  // should not intercept clicks etc. itself.
  z-index: $svg-layer-z-index;
  pointer-events: none;
}

.html-layer {
  $app-margin: 20px;

  display: grid;
  // Middle column provides space for SVG network diagrams.
  // XXX Consider making this more dynamic - if there's too many networks they
  // could still overlap the first column atm.
  grid-template-columns: 30% 20% 50%;
  margin: $app-margin;

  .selected-asset-inspector {
    @include asset-box-edge;

    grid-column-start: 1;

    // Use sticky position (see
    // https://css-tricks.com/almanac/properties/p/position/#article-header-id-5)
    // with same top as app margin, so element functions the same as if it had
    // `position: fixed` but can define its width and height in terms of
    // parent.
    position: sticky;
    top: $app-margin;

    background-color: white;

    // Can't set `min-width` to same as `width` as at point this will be
    // rechecked, such as when the inspector is resized, this will be relative
    // to the whole window width, and so the inspector would immediately jump
    // to fill 100% of the screen width on resize. Instead just use a
    // reasonable minimum (at least on my screen) for now.
    width: 100%;
    min-width: 50vh;

    $height: 75vh;
    height: $height;
    min-height: $height;

    // Inspector should be scrollable and resizable, and show on top of SVG
    // layer if they intersect.
    overflow: scroll;
    resize: both;
    z-index: $svg-layer-z-index + 1000;

    $faded-text-color: gray;

    .tree-title {
      text-align: center;
      font-weight: normal;
      color: $faded-text-color;
    }

    .no-selection {
      color: $faded-text-color;

      height: 66%;
      display: flex;
      justify-content: center;
      align-items: center;
    }
  }

  .cluster-diagram {
    grid-column-start: 3;
  }
}

.app-controls {
  padding-bottom: 20px;
  text-align: right;
}

@mixin hit-box-shadow($alpha) {
  // Effectively just modifies element colour with given colour; `10000px`
  // should just be a large enough value to ensure this always covers the whole
  // element.
  box-shadow: inset 0 0 10000px 10000px rgba($flight-app-bar-blue, $alpha);
}

@mixin asset {
  @include asset-box-edge;

  position: relative;

  .asset-hit-box {
    @include cover;
    position: absolute;

    &:hover, &:focus {
      @include hit-box-shadow(0.2);
    }

    &:active {
      @include hit-box-shadow(0.1);
    }
  }
}

// Mixin for any top-level asset which appears directly in a rack.
@mixin asset-in-rack {
  @include asset;
  background-color: lightgray;
  margin: 20px;
}

.rack {
  @include asset;
  background-color: darkgrey;
}

.network-switch {
  @include asset-in-rack;
}

.chassis {
  @include asset-in-rack;
  display: grid;
  grid-template-columns: 75% 25%;

  .servers {
    grid-column-start: 1;
  }

  .psus {
    grid-column-start: 2;
    display: flex;
    flex-direction: column;
  }
}

.psu {
  @include asset;
  display: inline-block;
  background-color: orange;
}

.server {
  @include asset;
  width: 66%;
  background-color: gray;
  display: grid;
  grid-template-columns: 50% 50%;

  .network-adapters {
    grid-column-start: 1;
    display: flex;
    flex-direction: column;
  }

  .nodes {
    grid-column-start: 2;
  }
}

.node {
  @include asset;
  width: 100px;
  margin-left: 50px;
  background-color: coral;
}

.network-adapter {
  @include asset;
  display: inline-block;
  width: 50px;
  background-color: lightblue;
}

.group {
  @include asset;

  // `border-color` will be dynamically generated based on the group name, so
  // each distinct group uses a different colour.
  border-width: 2px;
  border-style: dashed;
  padding: 10px;
}

.title {
  text-decoration: underline;
}
